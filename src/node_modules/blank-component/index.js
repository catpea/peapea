module.exports = function(){
  return component;
}

function component( container, componentState ){

  const root = document.createElement("div");
  root.style.height = "100%";
  root.style.width = "100%";
  root.style.display = "block";
  container.element.appendChild(root);

  ///Emitted after the item has been sized and added to the DOM. Useful if you're working with an UI library that measures its container on startup.
  container.on( 'open', function(){
    root.innerHTML =  '<small>' + componentState.label + '</small>' ;
  })

  // Emitted after the container has been resized
  container.on('resize', function(){

  })

  // Emitted before the container will be destroyed. This will happen when the user clicks close as well as when a higher up part of the tree is destroyed.
  container.on('destroy', function(){

  })

  // Emitted when the container is closed. Closing the container will also call destroy. To clarify: Only subscribe to this event if you want to do something specific when the user clicks close, otherwise always subscribe to destroy
  container.on('close', function(){

  })

  // Emitted when a tab for this container is created. Can be called more than once (e.g. when a new tab is created as result of dragging the item to a different position).
  container.on('tab', function(){

  })

  // Emitted before the container is hidden
  container.on('hide', function(){

  })

  // Emitted before the container is shown
  container.on('show', function(){

  })


}
